// 1. Cria o mapa
const map = L.map("map").setView([0, 0], 2); // Esse trecho de c√≥digo √© a primeira coisa que fazemos quando criamos um mapa com Leaflet.
// L ‚Üí √© o objeto principal do Leaflet (todos os m√©todos v√™m dele).
// .map("map") ‚Üí cria um mapa interativo dentro do elemento HTML que tem o \*\*id="map"\`.
// .setView(\[0, 0], 2) define a posi√ß√£o inicial e o zoom do mapa.
// O primeiro par√¢metro √© a latitude e longitude. O segundo par√¢metro √© o n√≠vel de zoom.

// 2. Adiciona os tiles do OpenStreetMap
L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
  maxZoom: 19, // Define o zoom m√°ximo que o usu√°rio pode dar.
  attribution: "¬© OpenStreetMap contribuidores", // √â o texto de cr√©ditos mostrado no canto do mapa. Por licen√ßa, voc√™ deve dar cr√©dito ao OSM (e a outros provedores, se usar).
}).addTo(map); // Adiciona essa camada de tiles no mapa que voc√™ criou. Sem essa parte, o mapa fica em branco.

// 3. Verifica se o navegador suporta Geolocation
if (navigator.geolocation) {
  // Verifica se o navegador suporta Geolocation API. Nem todos os navegadores antigos suportam.
  navigator.geolocation.getCurrentPosition(
    async (position) => {
      // Pede ao navegador a localiza√ß√£o atual do usu√°rio. success ‚Üí fun√ß√£o executada se obtida; error ‚Üí se houver problema.

      const lat = position.coords.latitude; // Extrai a latitude da posi√ß√£o do usu√°rio.
      const lon = position.coords.longitude; // Extrai a longitude da posi√ß√£o do usu√°rio.

      map.setView([lat, lon], 15); // Centraliza o mapa na posi√ß√£o do usu√°rio. 15 √© o n√≠vel de zoom, mostrando a cidade ou bairro aproximado.

      L.marker([lat, lon])
        .addTo(map) // Cria um marcador no mapa na posi√ß√£o do usu√°rio.
        .bindPopup("üìç Voc√™ est√° aqui!")
        .openPopup(); // Adiciona um bal√£o de texto ao marcador e abre imediatamente.

      // 4. Busca locais pr√≥ximos (exemplo: farmacias em at√© 1000m)
      const query = `[out:json];node["amenity"="pharmacy"](around:1000,${lat},${lon});out;`; // Monta a query da Overpass API para buscar restaurantes em um raio de 1000 metros da localiza√ß√£o do usu√°rio.
      const url = `https://overpass-api.de/api/interpreter?data=${encodeURIComponent(
        query
      )}`; // Codifica a query e cria a URL completa da requisi√ß√£o.
      /*
encodeURIComponent() √© uma fun√ß√£o do JavaScript que transforma uma string em um formato seguro para URLs. URLs n√£o podem ter certos caracteres como espa√ßos, acentos, #, &, ?, + etc. Ele substitui esses caracteres por c√≥digos que a URL entende.
*/
      try {
        const response = await fetch(url); // Faz a requisi√ß√£o ass√≠ncrona √† Overpass API.
        const data = await response.json(); // Converte de JSON (string) para objeto JavaScript

        data.elements.forEach((element) => {
          // Para cada ponto retornado pela API ("ponto‚Äù √© basicamente um lugar espec√≠fico no mapa)
          const nome = element.tags.name || "Restaurante"; // Pega o nome do ponto ou usa 'Restaurante' se n√£o houver.
          const coords = [element.lat, element.lon]; // Pega as coordenadas do ponto.

          L.marker(coords)
            .addTo(map) // Adiciona um marcador no mapa.
            .bindPopup(`üç¥ ${nome}`); // Adiciona um popup com o nome do restaurante.
        });
      } catch (err) {
        console.error("Erro ao buscar dados da Overpass API", err); // Captura e mostra erros da API.
      }
    },
    () => {
      alert("N√£o foi poss√≠vel obter sua localiza√ß√£o."); // Fun√ß√£o de erro da Geolocation API.
    }
  );
} else {
  alert("Geolocaliza√ß√£o n√£o √© suportada."); // Caso o navegador n√£o suporte Geolocation.
}
